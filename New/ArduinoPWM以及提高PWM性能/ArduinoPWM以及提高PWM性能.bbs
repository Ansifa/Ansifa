<P align=center><FONT size=3>Arduino软件模拟PWM以及提高软PWM效率</FONT></P><BR><FONT size=3>一、什么是PWM</FONT><BR><BR>PWM即Pulse Wavelength Modulation脉宽调制波，通过调整输出信号占空比，从而达到改变输出平均电压的目的。相信Arduino的PWM大家都不陌生，在Arduino Duemilanove 2009中，有6个8位精度PWM引脚，分别是3, 5, 6, 9, 10, 11脚。我们可以使用analogWrite()控制PWM脚输出频率大概在500Hz的左右的PWM调制波。分辨率8位即2的8次方等于256级精度。但是有时候我们会觉得6个PWM引脚不够用。比如我们做一个10路灯调光，就需要有10个PWM脚。Arduino Duemilanove 2009有13个数字输出脚，如果它们都可以PWM的话，就能满足条件了。于是本文介绍用软件模拟PWM。<BR><BR><FONT size=3>二、Arduino软件模拟PWM</FONT><BR><BR>Arduino PWM调压原理：PWM有好几种方法。而Arduino因为电源和实现难度限制，一般使用周期恒定，占空比变化的单极性PWM。<BR>通过调整一个周期里面输出脚高/低电平的时间比（即是占空比）去获得给一个用电器不同的平均功率。<BR><BR>如图所示，假设PWM波形周期1ms（即1kHz），分辨率1000级。那么需要一个信号时间精度1ms/1000=1us的信号源，即1MHz。所以说，PWM的实现难点在于需要使用很高频的信号源，才能获得快速与高精度。下面先由一个简单的PWM程序开始： <BR>
<DIV class=quote><SPAN class=quote></SPAN><BR><FONT color=#0000ff>const int </FONT><FONT color=#000000>PWMPin </FONT><FONT color=#000080>= </FONT><FONT color=#800080>13</FONT><FONT color=#000080>; <BR></FONT><FONT color=#0000ff>int </FONT><FONT color=#000000>bright </FONT><FONT color=#000080>= </FONT><FONT color=#800080>0</FONT><FONT color=#000080>; <BR></FONT><FONT color=#0000ff>void </FONT><FONT color=#000000>setup</FONT><FONT color=#000080>() <BR>{ <BR></FONT><FONT color=#000000>pinMode</FONT><FONT color=#000080>(</FONT><FONT color=#000000>PWMPin</FONT><FONT color=#000080>, </FONT><FONT color=#000000>OUTPUT</FONT><FONT color=#000080>); <BR>} <BR></FONT><FONT color=#0000ff>void </FONT><FONT color=#000000>loop</FONT><FONT color=#000080>() <BR>{ <BR></FONT><FONT color=#0000ff>if</FONT><FONT color=#000080>((</FONT><FONT color=#000000>bright</FONT><FONT color=#000080>++) == </FONT><FONT color=#800080>255</FONT><FONT color=#000080>) </FONT><FONT color=#000000>bright </FONT><FONT color=#000080>= </FONT><FONT color=#800080>0</FONT><FONT color=#000080>; <BR><BR></FONT><FONT color=#0000ff>for</FONT><FONT color=#000080>(</FONT><FONT color=#0000ff>int </FONT><FONT color=#000000>i </FONT><FONT color=#000080>= </FONT><FONT color=#800080>0</FONT><FONT color=#000080>; </FONT><FONT color=#000000>i </FONT><FONT color=#000080>&lt; </FONT><FONT color=#800080>255</FONT><FONT color=#000080>; </FONT><FONT color=#000000>i</FONT><FONT color=#000080>++) <BR>{ <BR></FONT><FONT color=#0000ff>if</FONT><FONT color=#000080>(</FONT><FONT color=#000000>i </FONT><FONT color=#000080>&lt; </FONT><FONT color=#000000>bright</FONT><FONT color=#000080>) <BR>{ <BR></FONT><FONT color=#000000>digitalWrite</FONT><FONT color=#000080>(</FONT><FONT color=#000000>PWMPin</FONT><FONT color=#000080>, </FONT><FONT color=#000000>HIGH</FONT><FONT color=#000080>); <BR></FONT><FONT color=#000000>delayMicroseconds</FONT><FONT color=#000080>(</FONT><FONT color=#800080>30</FONT><FONT color=#000080>); <BR>} <BR></FONT><FONT color=#0000ff>else <BR></FONT><FONT color=#000080>{ <BR></FONT><FONT color=#000000>digitalWrite</FONT><FONT color=#000080>(</FONT><FONT color=#000000>PWMPin</FONT><FONT color=#000080>, </FONT><FONT color=#000000>LOW</FONT><FONT color=#000080>); <BR></FONT><FONT color=#000000>delayMicroseconds</FONT><FONT color=#000080>(</FONT><FONT color=#800080>30</FONT><FONT color=#000080>); <BR>} <BR>} <BR>} <BR></FONT></DIV><BR><BR>这是一个软件PWM控制Arduino D13引脚的例子。只需要一块Arduino即可测试此代码。<BR><BR>程序解析：由for循环可以看出，完成一个PWM周期，共循环255次。<BR>假设bright=100时候，在第0~100次循环中，i等于1到99均小于bright，于是输出PWMPin高电平；<BR>然后第100到255次循环里面，i等于100~255大于bright，于是输出PWMPin低电平。无论输出高低电平都保持30us。<BR>那么说，如果bright=100的话，就有100次循环是高电平，155次循环是低电平。<BR>如果忽略指令执行时间的话，这次的PWM波形占空比为100/255，如果调整bright的值，就能改变接在D13的LED的亮度。<BR>这里设置了每次for循环之后，将bright加一，并且当bright加到255时归0。所以，我们看到的最终效果就是LED慢慢变亮，到顶之后然后突然暗回去重新变亮。<BR>这是最基本的PWM方法，也应该是大家想的比较多的想法。<BR><BR>然后介绍一个简单一点的。思维风格完全不同。不过对于驱动一个LED来说，效果与上面的程序一样。<BR>
<DIV class=quote><SPAN class=quote></SPAN><BR><FONT color=#0000ff>const int </FONT><FONT color=#000000>PWMPin </FONT><FONT color=#000080>= </FONT><FONT color=#800080>13</FONT><FONT color=#000080>; <BR></FONT><FONT color=#0000ff>int </FONT><FONT color=#000000>bright </FONT><FONT color=#000080>= </FONT><FONT color=#800080>0</FONT><FONT color=#000080>; <BR></FONT><FONT color=#0000ff>void </FONT><FONT color=#000000>setup</FONT><FONT color=#000080>() <BR>{ <BR></FONT><FONT color=#000000>pinMode</FONT><FONT color=#000080>(</FONT><FONT color=#000000>PWMPin</FONT><FONT color=#000080>, </FONT><FONT color=#000000>OUTPUT</FONT><FONT color=#000080>); <BR>} <BR></FONT><FONT color=#0000ff>void </FONT><FONT color=#000000>loop</FONT><FONT color=#000080>() <BR>{ <BR></FONT><FONT color=#000000>digitalWrite</FONT><FONT color=#000080>(</FONT><FONT color=#000000>PWMPin</FONT><FONT color=#000080>, </FONT><FONT color=#000000>HIGH</FONT><FONT color=#000080>); <BR></FONT><FONT color=#000000>delayMicroseconds</FONT><FONT color=#000080>(</FONT><FONT color=#000000>bright</FONT><FONT color=#000080>*</FONT><FONT color=#800080>30</FONT><FONT color=#000080>); <BR></FONT><FONT color=#000000>digitalWrite</FONT><FONT color=#000080>(</FONT><FONT color=#000000>PWMPin</FONT><FONT color=#000080>, </FONT><FONT color=#000000>LOW</FONT><FONT color=#000080>); <BR></FONT><FONT color=#000000>delayMicroseconds</FONT><FONT color=#000080>((</FONT><FONT color=#800080>255 </FONT><FONT color=#000080>- </FONT><FONT color=#000000>bright</FONT><FONT color=#000080>)*</FONT><FONT color=#800080>30</FONT><FONT color=#000080>); <BR></FONT><FONT color=#0000ff>if</FONT><FONT color=#000080>((</FONT><FONT color=#000000>bright</FONT><FONT color=#000080>++) == </FONT><FONT color=#800080>255</FONT><FONT color=#000080>) </FONT><FONT color=#000000>bright </FONT><FONT color=#000080>= </FONT><FONT color=#800080>0</FONT><FONT color=#000080>; <BR>} <BR><BR></FONT></DIV><BR><BR>可以看出，这段代码少了一个For循环。它先输出一个高电平，然后维持(bright*30)us。然后输出一个低电平，维持时间((255-bright)*30)us。这样两次高低就能完成一个PWM周期。分辨率也是255。<BR><BR><FONT size=3>三、多引脚PWM</FONT><BR><BR>Arduino本身已有PWM引脚并且运行起来不占CPU时间，所以软件模拟一个引脚的PWM完全没有实用意义。我们软件模拟的价值在于：他能将任意的数字IO口变成PWM引脚。当一片Arduino要同时控制多个PWM，并且没有其他重任务的时候，就要用软件PWM了。<BR><BR>多引脚PWM有一种下面的方式：<BR><BR>
<DIV class=quote><SPAN class=quote></SPAN><BR><FONT color=#0000ff>int </FONT><FONT color=#000000>brights</FONT><FONT color=#000080>[</FONT><FONT color=#800080>14</FONT><FONT color=#000080>] = {</FONT><FONT color=#800080>0</FONT><FONT color=#000080>}; </FONT><FONT color=#008000>//定义14个引脚的初始亮度，可以随意设置 <BR></FONT><FONT color=#0000ff>int </FONT><FONT color=#000000>StartPWMPin </FONT><FONT color=#000080>= </FONT><FONT color=#800080>0</FONT><FONT color=#000080>, </FONT><FONT color=#000000>EndPWMPin </FONT><FONT color=#000080>= </FONT><FONT color=#800080>13</FONT><FONT color=#000080>; </FONT><FONT color=#008000>//设置D0~D13为PWM引脚 <BR></FONT><FONT color=#0000ff>int </FONT><FONT color=#000000>PWMResolution </FONT><FONT color=#000080>= </FONT><FONT color=#800080>255</FONT><FONT color=#000080>; </FONT><FONT color=#008000>//设置PWM占空比分辨率 <BR><BR></FONT><FONT color=#0000ff>void </FONT><FONT color=#000000>setup</FONT><FONT color=#000080>() <BR>{ <BR></FONT><FONT color=#008000>//定义所有IO端输出 <BR></FONT><FONT color=#0000ff>for</FONT><FONT color=#000080>(</FONT><FONT color=#0000ff>int </FONT><FONT color=#000000>i </FONT><FONT color=#000080>= </FONT><FONT color=#000000>StartPWMPin</FONT><FONT color=#000080>; </FONT><FONT color=#000000>i </FONT><FONT color=#000080>&lt;= </FONT><FONT color=#000000>EndPWMPin</FONT><FONT color=#000080>; </FONT><FONT color=#000000>i</FONT><FONT color=#000080>++) <BR>{ <BR></FONT><FONT color=#000000>pinMode</FONT><FONT color=#000080>(</FONT><FONT color=#000000>i</FONT><FONT color=#000080>, </FONT><FONT color=#000000>OUTPUT</FONT><FONT color=#000080>); <BR></FONT><FONT color=#008000>//随便定义个初始亮度,便于观察 <BR>brights[ i ] = random(0, 255); <BR></FONT><FONT color=#000080>} <BR><BR>} <BR></FONT><FONT color=#0000ff>void </FONT><FONT color=#000000>loop</FONT><FONT color=#000080>() <BR>{ <BR></FONT><FONT color=#008000>//这for循环是为14盏灯做渐亮的。每次Arduino loop()循环， <BR>//brights自增一次。直到brights=255时候，将brights置零重新计数。 <BR></FONT><FONT color=#0000ff>for</FONT><FONT color=#000080>(</FONT><FONT color=#0000ff>int </FONT><FONT color=#000000>i </FONT><FONT color=#000080>= </FONT><FONT color=#000000>StartPWMPin</FONT><FONT color=#000080>; </FONT><FONT color=#000000>i </FONT><FONT color=#000080>&lt;= </FONT><FONT color=#000000>EndPWMPin</FONT><FONT color=#000080>; </FONT><FONT color=#000000>i</FONT><FONT color=#000080>++) <BR>{ <BR></FONT><FONT color=#0000ff>if</FONT><FONT color=#000080>((</FONT><FONT color=#000000>brights</FONT><FONT color=#000080>[</FONT><FONT color=#000000>i</FONT><FONT color=#000080>]++) == </FONT><FONT color=#000000>PWMResolution</FONT><FONT color=#000080>) </FONT><FONT color=#000000>brights</FONT><FONT color=#000080>[</FONT><FONT color=#000000>i</FONT><FONT color=#000080>] = </FONT><FONT color=#800080>0</FONT><FONT color=#000080>; <BR>} <BR><BR></FONT><FONT color=#0000ff>for</FONT><FONT color=#000080>(</FONT><FONT color=#0000ff>int </FONT><FONT color=#000000>i </FONT><FONT color=#000080>= </FONT><FONT color=#800080>0</FONT><FONT color=#000080>; </FONT><FONT color=#000000>i </FONT><FONT color=#000080>&lt;= </FONT><FONT color=#000000>PWMResolution</FONT><FONT color=#000080>; </FONT><FONT color=#000000>i</FONT><FONT color=#000080>++) </FONT><FONT color=#008000>//i是计数一个PWM周期 <BR></FONT><FONT color=#000080>{ <BR></FONT><FONT color=#0000ff>for</FONT><FONT color=#000080>(</FONT><FONT color=#0000ff>int </FONT><FONT color=#000000>j </FONT><FONT color=#000080>= </FONT><FONT color=#000000>StartPWMPin</FONT><FONT color=#000080>; </FONT><FONT color=#000000>j </FONT><FONT color=#000080>&lt;= </FONT><FONT color=#000000>EndPWMPin</FONT><FONT color=#000080>; </FONT><FONT color=#000000>j</FONT><FONT color=#000080>++) </FONT><FONT color=#008000>//每个PWM周期均遍历所有引脚 <BR></FONT><FONT color=#000080>{ <BR></FONT><FONT color=#0000ff>if</FONT><FONT color=#000080>(</FONT><FONT color=#000000>i </FONT><FONT color=#000080>&lt; </FONT><FONT color=#000000>brights</FONT><FONT color=#000080>[</FONT><FONT color=#000000>j</FONT><FONT color=#000080>]) <BR>{ <BR></FONT><FONT color=#000000>digitalWrite</FONT><FONT color=#000080>(</FONT><FONT color=#000000>j</FONT><FONT color=#000080>, </FONT><FONT color=#000000>HIGH</FONT><FONT color=#000080>); <BR></FONT><FONT color=#000000>delayMicroseconds</FONT><FONT color=#000080>(</FONT><FONT color=#800080>2</FONT><FONT color=#000080>); <BR>} <BR></FONT><FONT color=#0000ff>else <BR></FONT><FONT color=#000080>{ <BR></FONT><FONT color=#000000>digitalWrite</FONT><FONT color=#000080>(</FONT><FONT color=#000000>j</FONT><FONT color=#000080>, </FONT><FONT color=#000000>LOW</FONT><FONT color=#000080>); <BR></FONT><FONT color=#000000>delayMicroseconds</FONT><FONT color=#000080>(</FONT><FONT color=#800080>2</FONT><FONT color=#000080>); <BR>} <BR>} <BR>} <BR>} <BR></FONT></DIV>
<P><BR><BR>这个程序比较简单，但是能演示基本的PWM功能。我们看loop(){}段，里面第一个for循环是做亮度渐增的，跟上面程序一样，每次循环自增，然后到255就置零重来。下面的for循环是外层循环组成一个PWM周期的，每个周期用255次循环完成。就是说，PWM精度255级。<BR><BR>看内层for循环，每个PWM周期都包含由StartPWMPin到EndPWMPin的遍历。就是说，按照brights数组里面的元素去设置每个引脚的PWM值。由于每个PWM周期都要遍历14个引脚，所以我们使用的delayMicroseconds); 延时要降低到2us左右。每个PWM周期就是2usx14只脚=28us左右，在加上代码执行时间误差。大概与原来的30us接近了。<BR><BR><FONT size=3>四、提高PWM速度</FONT><BR><BR>由上面可以看出，多引脚PWM的周期大致为<BR>每引脚PWM周期=每引脚判定后延时*要PWM的引脚数*每周期PWM判定次数(PWM精度)<BR>上面的代码不包括指令执行时间，大概是2us x 14 x 255≈7ms=一个周期，频率142Hz。如果使用Arduino Mega 2560这样的大板，我们或者会用更多的引脚，比如32个。周期就变成2us x 32 x 255≈16ms一个周期，频率就是62Hz了。大概实验可以看到，如果周期超过12ms以上，驱动LED我们会看到明显的闪烁。所以必须降低三个值中的随便一个加快PWM速度。</P>
<P>所以我们要更改PWM周期的话，我们将精度（代码里面的变量：PWMResolution）降低就行，比如一般调整LED亮度的话，我们用64级精度就行。这样速度就是2x32x64=4ms。就不会闪了。</P></EM>